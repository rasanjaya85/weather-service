group 'org.wso2'

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'docker'
apply plugin: 'findbugs'

buildscript {
    repositories { jcenter() }
    dependencies {
        classpath 'se.transmode.gradle:gradle-docker:1.2'
    }
}

repositories {
    mavenCentral()
    maven {
        url 'http://192.168.33.20:8081/repository/maven-releases/'
    }
//    mavenLocal()
}


dependencies {
    compile 'org.wso2.microservices:microservice-chassis:3.0'
    compile 'org.ehcache:jcache:1.0.0'
    compile 'com.google.inject.extensions:guice-servlet:4.1.0'

    compile 'javax.ws.rs:javax.ws.rs-api:2.0.1'
    compile 'javax.servlet:javax.servlet-api:3.1.0'

    compile 'org.jboss.resteasy:resteasy-client:3.1.0.Final'
    compile 'org.jboss.resteasy:resteasy-jaxrs:3.1.0.Final'
    compile 'org.jboss.resteasy:resteasy-guice:3.1.0.Final'
    compile 'org.jboss.resteasy:resteasy-jackson2-provider:3.1.0.Final'
    compile 'org.eclipse.jetty:jetty-servlet:9.4.0.v20161208'
    compile 'com.typesafe:config:1.3.1'
    compile 'com.orbitz.consul:consul-client:0.9.7'
}

mainClassName = 'org.wso2.weather.WeatherService'

task customFindbugs(type: FindBugs) {
    description = "Uses to test the static vulnerable code changes in latest commits"
    ignoreFailures = true
    effort = "default"
    reportLevel = "medium"
    classes = files("$project.buildDir/intermediates/classes")
    excludeFilter = file("$rootProject.projectDir/exclude.xml")

    source = fileTree('src/main/java/')
    classpath = files()
    reports {
        xml.enabled = false
        xml.withMessages = true
        html.enabled = !xml.isEnabled()
        xml.destination "$project.buildDir/outputs/findbugs/findbugs-output.xml"
        html.destination "$project.buildDir/outputs/findbugs/findbugs-output.html"
    }
}

task dockerImage(type: Docker) {
    group = 'docker'
    description = "Uses to create the Docker images include build artifacts and push built image to docker registry."
    inputs.files project.distTar
    push = Boolean.getBoolean('docker.push')

    doFirst {
        def buildNumber = System.getenv('BUILD_NUMBER')
        baseImage = 'rasanjaya85/microservice-base'
        tagVersion = buildNumber ? "${project.version}.${buildNumber}" : project.version
        registry = 'registry.wso2.org'
        applicationName = project.applicationName
        addFile project.distTar.outputs.files.singleFile
        exposePort 8080

        def installDir = "/" + project.distTar.archiveName - ".${project.distTar.extension}"
        entryPoint = ["$installDir/bin/${project.applicationName}"]
    }
}
dockerImage
//task hello(type: exec) {
//    workingDir "$projectDir/"
////    commandLine 'sh', '-c', "echo 'Starting running container and run dynamic test.'"
//    commandLine 'sh', '-c', "docker run -p 8080:8080 registry.cloudstaging.wso2.com:5000/weather-service:1.0"
////    commandLine 'sh', '-c', '/bin/bash response.sh'
//}
//

dockerImage.dependsOn(build)
//dockerImage.dependsOn 'assemble'




